<stmt> :=
      <alter-table-stmt>
d   | <begin-stmt>
d   | <commit-stmt>
    | <create-stmt>
    | <delete-stmt>
    | <drop-stmt>
    | <insert-stmt>
    | <reindex-stmt>
d   | <release-stmt>
d   | <rollback-stmt>
d   | <savepoint-stmt>
    | <select-stmt>
    | <update-stmt>
    | <vacuum-stmt>

<alter-table-stmt> :=
      ALTER TABLE table-name <alter-table-actions>

<alter-table-actions> :=
      RENAME <alter-table-rename>
    | ADD <alter-table-column-opt> <column-def>
    | DROP <alter-table-column-opt> column-name

<alter-table-rename> :=
      TO new-table-name
    | <alter-table-column-opt> column-name TO new-column-name

<alter-table-column-opt> :=
      COLUMN
    | ε

<begin-stmt> :=
      BEGIN <transaction-opt>


<commit-stmt> :=
      COMMIT <transaction-opt>

<transaction-opt> :=
      TRANSACTION
    | ε

<create-stmt> :=
      CREATE <create-stmt-types>

<create-stmt-types> :=
      <create-index-stmt>
    | <create-table-stmt>

<create-index-stmt> := 
      <unique-opt> INDEX <not-exists-opt> index-name ON table-name (<indexed-column-list>) <where-expr>

<create-table-stmt> :=
      TABLE <not-exists-opt> table-name <create-table-source>

<create-table-source> :=
      AS <select-stmt>
    | (<column-def-list> <table-constraint-rest>)

<unique-opt> := 
      UNIQUE
    | ε

<not-exists-opt> := 
      IF NOT EXISTS
    | ε

<delete-stmt> :=
      DELETE FROM <quantified-table-name> <where-expr> <returning-opt>

<drop-stmt> :=
    DROP <drop-stmt-types>

<drop-stmt-types> :=
      INDEX <not-exists-opt> index-name
    | TABLE <not-exists-opt> table-name

<insert-stmt> :=
      INSERT INTO table-name <table-as-alias> <column-list-opt> <insert-actions> <returning-opt>

<insert-actions> :=
      VALUES ( <expr-list> ) <upsert-clause-opt>
    | <select-stmt> <upsert-clause-opt>
    | DEFAULT VALUES

<reindex-stmt> := 
      REINDEX <reindex-target>

<reindex-target> :=
      collation-name
    | table-name
    | index-name
    | ε

<release-stmt> := 
      RELEASE <savepoint-opt> savepoint-name

<savepoint-opt> :=
      SAVEPOINT
    | ε

<rollback-stmt> :=
      ROLLBACK <transaction-opt> <rollback-to>

<rollback-to> :=
      TO <savepoint-opt> savepoint-name
    | ε

<savepoint-stmt> :=
      SAVEPOINT savepoint-name

<select-stmt> :=
      SELECT <distinct-opt> <result-column-list> <from-opt> <where-expr> <group-by> <having-expr> <compound-select> <order-by> <limit-opt>

<from-opt> :=
      FROM <from-target>
    | ε

<from-target> :=
      <join-clause>
    | <table-or-subquery-list>

<group-by> :=
      GROUP BY <expr-list>
    | ε

<having-expr> :=
      HAVING <expr>
    | ε

<compound-select> :=
      <compound-operator> <select-stmt>
    | ε

<order-by> :=
      ORDER BY <ordering-term-list>
    | ε

<limit-opt> :=
      LIMIT <expr> <offset-opt>
    | ε

<offset-opt> :=
      OFFSET <expr>
    | ε

<update-stmt> :=
      UPDATE <update-or> <quantified-table-name> SET <update-set-list> <from-opt> <where-expr> <returning-opt>

<update-set-list> :=
      <update-set-target> = <expr> <update-set-rest>

<update-set-rest> :=
      , <update-set-target> = <expr> <update-set-rest>
    | ε

<update-set-target> :=
      column-name
    | ( <column-name-list> )

<update-or> :=
      OR <conflict-action>
    | ε

<vacuum-stmt> :=
      VACUUM

<ordering-term-list> :=
      <ordering-term> <ordering-term-rest>

<ordering-term-rest> :=
      , <ordering-term> <ordering-term-rest>
    | ε

<table-or-subquery-list> :=
      <table-or-subquery> <table-or-subquery-rest>

<table-or-subquery-rest> :=
      , <table-or-subquery> <table-or-subquery-rest>
    | ε


<distinct-opt> :=
      DISTINCT
    | ε

<result-column-list> :=
      <result-column> <result-column-rest>

<result-column-rest> :=
      , <result-column-rest>
    | ε

<upsert-clause-opt> :=
      <upsert-clause>
    | ε

<column-list-opt> :=
      ( <column-list> )
    | ε

<column-def-list> :=
      <column-def> <column-def-rest>

<column-def-rest> :=
      , <column-def> <column-def-rest>
    | ε

<column-def> := 
      column-name <column-def-type-name> <column-def-constraint-list>

<column-def-type-name> :=
      <type-name>
    | ε

<column-def-constraint-list> :=
      <column-constraint> <column-def-constraint-list>
    | ε

<table-constraint-rest> :=
      , <table-constraint> <table-constraint-rest>
    | ε

<table-constraint> :=
      PRIMARY KEY (<indexed-column-list>) <conflict-clause>
    | UNIQUE (<indexed-column-list>) <conflict-clause>
    | CHECK (<expr>)
    | FOREIGN KEY ( <column-name-list> ) <foreign-key-clause>
      
<indexed-column> :=
      column-name <collation> <order>
    | <expr> <collation> <order>

<indexed-column-list> :=
      <indexed-column> <indexed-column-rest>
    | ε

<indexed-column-rest> :=
      , <indexed-column> <indexed-column-rest>
    | ε

<quantified-table-name> :=
      table-name <table-as-indexed>

<returning-opt> :=
      <returning-clause>
    | ε

<returning-clause> := 
      RETURNING <returning-clause-result>

<returning-clause-results> := 
      * <returning-clause-rest>
    | <expr> <column-as-alias> <returning-clause-rest>

<returning-clause-rest> :=
      , <returning-clause-results>
    | ε

<upsert-clause> := 
      ON CONFLICT <upsert-clause-paren> DO <upsert-clause-action>

<upsert-clause-action> :=
      NOTHING
    | UPDATE SET <upsert-clause-update-cols> = <expr> <upsert-clause-update-rest> <where-expr>

<upsert-clause-update-rest> :=
      , <upsert-clause-update-cols> = <expr> <upsert-clause-update-rest>
    | ε

<upsert-clause-update-cols> :=
      column-name
    | ( <column-name-list> )

<upsert-clause-paren> :=
      ( <indexed-column-list> ) <where-expr> 
    | ε

<where-expr> :=
      WHERE <expr>
    | ε

<column-name-list> :=
      column-name <column-name-list-rest>

<column-name-list-rest> :=
      , column-name <column-name-list-rest>
    | ε

<indexed-column> := 
      <column-name> <collation> <order>
    | <expr> <collation> <order>

<result-column> :=
      *
    | table-name.*
    | <expr> <column-as-alias>

<column-as-alias> :=
      AS column-alias
    | ε

<ordering-term> :=
      <expr> <collation> <order> <ordering-term-nulls>

<ordering-term-nulls> :=
      NULLS <ordering-term-null-order>
    | ε

<ordering-term-null-order> :=
      FIRST
    | LAST

<order> :=
      ASC
    | DESC
    | ε

<collation> :=
      COLLATE collation-name
    | ε

<compound-operator> :=
      UNION <compound-operator-all>
    | INTERSECT
    | EXCEPT

<compound-operator-all> :=
      ALL
    | ε

<type-name> := 
      name <type-name-number-field>

<type-name-number-field> :=
      ( <signed-number> <type-name-second-number> )
    | ε

<type-name-second-number> :=
      , <signed-number>
    | ε

<column-constraint> := 
      PRIMARY KEY <column-constraint-primary-key>
    | NOT NULL <conflict-clause>
    | UNIQUE <conflict-clause>
    | CHECK (<expr>)
    | DEFAULT <column-constraint-default>
    | COLLATE collation-name
    | <foreign-key-clause>

<column-constraint-primary-key> :=
      <conflict-clause>
    | ASC <conflict-clause>
    | DESC <conflict-clause>

<column-constraint-default> :=
      (<expr>)
    | <literal-value>
    | <signed-number>


<conflict-clause> :=
      ON CONFLICT <conflict-action>
    | ε

<conflict-action> :=
      ROLLBACK
    | ABORT
    | FAIL
    | IGNORE
    | REPLACE

<foreign-key-clause> :=
      REFERENCES foreign-table ( <column-name-list> ) <foreign-key-clause-on>

<foreign-key-cluase-on> :=
      ON <foreign-key-clause-updel>
    | ε

<foreign-key-caluse-updel> :=
      DELETE <foreign-key-clause-actions>
    | UPDATE <foreign-key-clause-actions>

<foreign-key-clause-actions> := 
      SET <foreign-key-clause-actions-set>
    | CASCADE
    | RESTRICT
    | NO ACTION

<foreign-key-clause-actions-set> :=
      NULL
    | DEFAULT

<join-clause> := 
      <table-or-subquery> <join-clause-chain>

<join-clause-chain> :=
      <join-operator> <table-or-subquery> <join-constraint> <join-clause-chain>
    | ε

<table-or-subquery> :=
      table-name <table-as-alias> <table-indexed>
    | ( <table-or-subquery-paren>

<table-indexed> :=
      INDEXED BY index-name
    | NOT INDEXED
    | ε

<table-or-subquery-paren> :=
      <select-stmt> ) <table-as-alias>
    | <join-clause> )
    | <table-or-subquery-list> )

<table-as-alias> :=
      AS table-alias
    | ε

<join-operator> := 
      ,
    | CROSS JOIN
    | NATURAL <join-operator-natural>
    | LEFT <join-operator-outer>
    | RIGHT <join-operator-outer>
    | FULL <join-operator-outer>
    | INNER JOIN
    | JOIN

<join-operator-natural> :=
      INNER JOIN
    | LEFT <join-operator-outer>
    | RIGHT <join-operator-outer>
    | FULL <join-operator-outer>
    
<join-operator-outer> :=
      OUTER JOIN
    | JOIN

<join-constraint> :=
      ON <expr>
    | USING ( <column-name-list> )
    | ε

<expr> := 
      <literal-value> <expr'>
    | table-name.column-name <expr'>
    | column-name <expr'>
    | unary-operator <expr> <expr'>
    | ( <expr-paren> ) <expr'>
    | <not-opt> EXISTS ( <select-stmt> ) <expr'>

<expr'> :=
      binary-operator <expr> <expr'>
    | COLLATE collation-name <expr'>
    | IS <is-follow> <expr'>
    | <not-opt> <not-follow> <expr'>

<not-opt> :=
      NOT
    | ε


<like-match> :=
      LIKE
    | MATCH

<is-follow> :=
      NULL
    | <not-opt> <distinct-from-opt> <expr>

<not-follow> :=
      NULL
    | <like-match> <expr>
    | BETWEEN <expr> AND <expr>
    | IN <expr-in>

<expr-in> :=
      table-name
    | ( <expr-paren> )

<distinct-from-opt> :=
      DISTINCT FROM
    | ε

<expr-paren> :=
      <expr-list>
    | <select-stmt>
    | ε

<signed-number> :=
      numeric-literal
    | -numeric-literal
    | +numeric-liternal

<literal-value> := numberic-literal | string-literal | NULL | TRUE | FALSE

